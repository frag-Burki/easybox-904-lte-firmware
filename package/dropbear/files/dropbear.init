#!/bin/sh /etc/rc.common
# Copyright (C) 2006-2010 OpenWrt.org
# Copyright (C) 2006 Carlos Sobrinho

NAME=dropbear
PROG=/usr/sbin/dropbear
START=50
STOP=50
PIDCOUNT=0
EXTRA_COMMANDS="killclients usb_start"
EXTRA_HELP="	killclients Kill ${NAME} processes except servers and yourself"
EXTRA_HELP=<<EOF
        killclients Kill ${NAME} processes except servers and yourself
        usb hotplug trigger usb_start
EOF

dropbear_start()
{
	local section="$1"

	# check if section is enabled (default)
	local enabled
	config_get_bool enabled "${section}" enable 1
	[ "${enabled}" -eq 0 ] && return 1

	# verbose parameter
	local verbosed
	config_get_bool verbosed "${section}" verbose 0

	# increase pid file count to handle multiple instances correctly
	PIDCOUNT="$(( ${PIDCOUNT} + 1))"

	# prepare parameters
	# A) password authentication
	local nopasswd
	local passauth
	config_get_bool passauth "${section}" PasswordAuth 1
	[ "${passauth}" -eq 0 ] && nopasswd=1
	# B) listen port
	local port
	######## ctc 20110516 modified #######
#	config_get port "${section}" Port
	DROPBEAR_ARGS="${nopasswd:+-s }${port:+-p $port}"
	########
	portN=2
	while [ $portN -le 10 ] ; do
		config_get port $section Port$portN
		if [ -n "$port" ] ; then
			DROPBEAR_ARGS="$DROPBEAR_ARGS -p $port"
		fi
		let portN=$portN+1
	done
	######################################
	# C) banner file
	local bannerfile
	config_get bannerfile "${section}" BannerFile
	[ -f "$bannerfile" ] || bannerfile=''
	# D) gatewayports
	local gatewayports
	config_get_bool gatewayports "${section}" GatewayPorts 0
	[ "${gatewayports}" -eq 1 ] || gatewayports=''
	# E) root password authentication
	local norootpasswd
	local rootpassauth
	config_get_bool rootpassauth "${section}" RootPasswordAuth 1
	[ "${rootpassauth}" -eq 0 ] && norootpasswd=1
	# concatenate parameters
	local args
	args="${nopasswd:+-s }${norootpasswd:+-g }${port:+-p ${port} }${bannerfile:+-b $bannerfile }${gatewayports:+-a }-P /var/run/${NAME}.${PIDCOUNT}.pid"

	# execute program and return its exit code
	[ "${verbosed}" -ne 0 ] && echo "${initscript}: section ${section} starting ${PROG} ${args}"
	${PROG} ${args}
	return $?
}

keygen()
{
	echo "[dropbear keygen]"
##	for keytype in rsa dss; do
##		# check for keys
##		key=dropbear/dropbear_${keytype}_host_key
##		[ -f /tmp/$key -o -s /etc/$key ] || {
##			# generate missing keys
##			mkdir -p /tmp/dropbear
##			[ -x /usr/bin/dropbearkey ] && {
##				/usr/bin/dropbearkey -t $keytype -f /tmp/$key 2>&- >&- && exec /etc/rc.common "$initscript" start
##			} &
##		exit 0
##		}
##	done

	echo "[dropbear keygen] after dropbearkey"

	lock /tmp/.switch2jffs
	######## ctc 20110516 modified #######
#	mkdir -p /etc/dropbear
	# to use /tmp/etc/config/dropbear_key to save keys
	mkdir -p /tmp/etc/config/dropbear_key
	cp /etc/config/cert/authorized_keys /etc/config/dropbear_key
	cp /etc/config/cert/dropbear_dss_host_key /etc/config/dropbear_key
	cp /etc/config/cert/dropbear_rsa_host_key /etc/config/dropbear_key
	######################################
	mv /tmp/dropbear/dropbear_* /etc/dropbear/
	lock -u /tmp/.switch2jffs
	chown root /etc/dropbear
	chmod 0700 /etc/dropbear
	chmod 0600 /etc/config/dropbear_key/authorized_keys
	chmod 0600 /etc/config/dropbear_key/dropbear_dss_host_key
	chmod 0600 /etc/config/dropbear_key/dropbear_rsa_host_key
}

boot()
{
	if [ "`ccfg_cli get AlwaysOn@ssh`" == "on" ] ; then
		start
	fi
}

start()
{
	local USB_PARENT_DIR
	local TARGET_FULL_FILE_NAME
	local TARGET_FILE_NAME
	local TARGET_FILE_SIZE
	local Run_Daemon="0"

	if [ "`ccfg_cli get AlwaysOn@ssh`" == "off" ] ; then
		# dropbear => If sesame.txt exists in the first partition of USB storage, router can start dropbear daemon.
		USB_PARENT_DIR="/tmp/usb"
		TARGET_FILE_NAME="sesame.txt"
		#echo "${USB_PARENT_DIR}"
		first_partition=`find ${USB_PARENT_DIR} -maxdepth 1 -iname "a?" -exec basename {} \; | sort | head -n 1`
		TARGET_FULL_FILE_NAME=${USB_PARENT_DIR}/${first_partition}/${TARGET_FILE_NAME}
		#echo "search ${TARGET_FULL_FILE_NAME} file now"
		sesame_file=`find ${USB_PARENT_DIR}/${first_partition} -maxdepth 1 -iname "${TARGET_FILE_NAME}" -exec basename {} \;`
		if [ "${sesame_file}" == "" ] ; then
			#echo "[dropbear start] can not find ${TARGET_FULL_FILE_NAME}"
			return
		fi
		TARGET_FILE_SIZE=`ls -lah ${TARGET_FULL_FILE_NAME} | awk '{ print $5}'`
		#echo "size of ${TARGET_FULL_FILE_NAME} is ${TARGET_FILE_SIZE}"
		if [ "${TARGET_FILE_SIZE}" != "0" ] ; then
			#echo "[dropbear start] ${TARGET_FULL_FILE_NAME} must be zero size."
			return
		fi
	fi

	[ -s /etc/dropbear/dropbear_rsa_host_key -a \
	  -s /etc/dropbear/dropbear_dss_host_key ] || keygen

	echo "start to run dropbear daemon"

	config_load "${NAME}"
	config_foreach dropbear_start dropbear
}

stop()
{
	# killing all server processes
	local pidfile
	for pidfile in `ls /var/run/${NAME}.*.pid`
	 do
		start-stop-daemon -q -K -s KILL -p "${pidfile}" -n "${NAME}"
		rm -f "${pidfile}"
	done
	[ -z "${pidfile}" ] && echo "${initscript}: no pid files, if you get problems with start then try killclients"
}

usb_start()
{
	local pidfile

	echo "[dropbear usb_start]"
	for pidfile in `ls /var/run/dropbear.*.pid`
		do
			return
		done

	start
}

killclients()
{
	local ignore=''
	local server
	local pid

	# if this script is run from inside a client session, then ignore that session
	pid="$$"
	while [ "${pid}" -ne 0 ]
	 do
		# get parent process id
		pid=`cut -d ' ' -f 4 "/proc/${pid}/stat"`
		[ "${pid}" -eq 0 ] && break

		# check if client connection
		grep -F -q -e "${PROG}" "/proc/${pid}/cmdline" && {
			append ignore "${pid}"
			break
		}
	done

	# get all server pids that should be ignored
	for server in `cat /var/run/${NAME}.*.pid`
	 do
		append ignore "${server}"
	done

	# get all running pids and kill client connections
	local skip
	for pid in `pidof "${NAME}"`
	 do
		# check if correct program, otherwise process next pid
		grep -F -q -e "${PROG}" "/proc/${pid}/cmdline" || {
			continue
		}

		# check if pid should be ignored (servers, ourself)
		skip=0
		for server in ${ignore}
		 do
			if [ "${pid}" == "${server}" ]
			 then
				skip=1
				break
			fi
		done
		[ "${skip}" -ne 0 ] && continue

		# kill process
		echo "${initscript}: Killing ${pid}..."
		kill -KILL ${pid}
	done
}

##case "$1" in
##	"boot")
##		boot
##		;;
##	"start")
##		start
##		;;
##	"usb_start")
##		usb_start
##		;;
##	"stop")
##		stop
##		;;
##	"restart")
##		restart
##		;;
##	*)
##		echo $"Usage $0 {boot|start|usb_start|stop|restart}"
##		;;
##esac