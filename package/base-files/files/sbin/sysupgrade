#!/bin/sh
. /etc/functions.sh

# initialize defaults
RAMFS_COPY_BIN=""	# extra programs for temporary ramfs root
RAMFS_COPY_DATA=""	# extra data files
export INTERACTIVE=0
export VERBOSE=1
export SAVE_CONFIG=1
export DELAY=
export CONF_IMAGE=
### ctc ###
export UPGRADE_KERNEL=0
export UPGRADE_ROOTFS=0
#export USE_REFRESH=0
export PART_NAME=linux
export ROOT_FS=Rootfs
###########

# parse options
while [ -n "$1" ]; do
	case "$1" in
		-i) export INTERACTIVE=1;;
		-d) export DELAY="$2"; shift;;
		-v) export VERBOSE="$(($VERBOSE + 1))";;
		-q) export VERBOSE="$(($VERBOSE - 1))";;
		-n) export SAVE_CONFIG=0;;
		-f) export CONF_IMAGE="$2"; shift;;
### ctc ###
		-k) export UPGRADE_KERNEL=1; export PART_NAME="Linux";;
		-r) export UPGRADE_ROOTFS=1; export PART_NAME="Rootfs";;
#		-r) export UPGRADE_ROOTFS=1; export PART_NAME="Rootfs"; export USE_REFRESH=0;;
        -a) export UPGRADE_KR=1; UPGRADE_KERNEL=0; UPGRADE_ROOTFS=0;;
###########
		-*)
			echo "Invalid option: $1"
			exit 1
		;;
		*) break;;
	esac
	shift;
done

### ctc ###
echo "UPGRADE_KERNEL=$UPGRADE_KERNEL; UPGRADE_ROOTFS=$UPGRADE_ROOTFS; PART_NAME=$PART_NAME"
###########

export CONFFILES=/tmp/sysupgrade.conffiles
export CONF_TAR=/tmp/sysupgrade.tgz

export ARGV="$*"
export ARGC="$#"

[ -z "$ARGV" ] && {
	cat <<EOF
Usage: $0 [options] <image file or URL>

Options:
	-d <delay>   add a delay before rebooting
	-f <config>  restore configuration from .tar.gz (file or url)
	-i           interactive mode
	-n	     do not save configuration over reflash
	-q           less verbose
	-v           more verbose
### ctc ###
	-k           upgrade linux kernel image
	-r           upgrade linux rootfs
	-a           upgrade kernel+rootfs, the image must be a gzip archive of two files: "linux.img" and "rootfs.img"
###########

EOF
	exit 1
}

add_uci_conffiles() {
	local file="$1"
	( find $(sed -ne '/^[[:space:]]*$/d; /^#/d; p' \
		/etc/sysupgrade.conf /lib/upgrade/keep.d/* 2>/dev/null) \
		-type f 2>/dev/null;
	  opkg list-changed-conffiles ) | sort -u > "$file"
	return 0
}

# hooks
sysupgrade_image_check="platform_check_image"
sysupgrade_init_conffiles="add_uci_conffiles"

include /lib/upgrade

do_save_conffiles() {
	[ -z "$(rootfs_type)" ] && {
		echo "Cannot save config while running from ramdisk."
		ask_bool 0 "Abort" && exit
		return 0
	}
	run_hooks "$CONFFILES" $sysupgrade_init_conffiles
	ask_bool 0 "Edit config file list" && vi "$CONFFILES"

	v "Saving config files..."
	[ "$VERBOSE" -gt 1 ] && TAR_V="v" || TAR_V=""
	tar c${TAR_V}zf "$CONF_TAR" -T "$CONFFILES" 2>/dev/null
}

type platform_check_image >/dev/null 2>/dev/null || {
	echo "Firmware upgrade is not implemented for this platform."
	exit 1
}

### ctc ###
# We don't support image check now. // bitonic
#for check in $sysupgrade_image_check; do
#	( eval "$check \"\$ARGV\"" ) || {
#		echo "Image check '$check' failed."
#		exit 1
#	}
#done
###########

if [ -n "$CONF_IMAGE" ]; then
	case "$(get_magic_word $CONF_IMAGE cat)" in
		# .gz files
		1f8b) ;;
		*)
			echo "Invalid config file. Please use only .tar.gz files"
			exit 1
		;;
	esac
	get_image "$CONF_IMAGE" "cat" > "$CONF_TAR"
	export SAVE_CONFIG=1
elif ask_bool $SAVE_CONFIG "Keep config files over reflash"; then
	do_save_conffiles
	export SAVE_CONFIG=1
else
	export SAVE_CONFIG=0
fi
run_hooks "" $sysupgrade_pre_upgrade

if [ -n "$(rootfs_type)" ]; then
	v "Switching to ramdisk..."
	run_ramfs '. /etc/functions.sh; include /lib/upgrade; do_upgrade'
else
	do_upgrade
fi
